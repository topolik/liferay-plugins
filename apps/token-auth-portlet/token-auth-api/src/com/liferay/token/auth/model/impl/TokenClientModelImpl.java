/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.token.auth.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.User;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.service.UserLocalServiceUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.token.auth.model.TokenClient;
import com.liferay.token.auth.model.TokenClientModel;
import com.liferay.token.auth.model.TokenClientSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TokenClient service. Represents a row in the &quot;TokenAuth_TokenClient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.token.auth.model.TokenClientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TokenClientImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TokenClientImpl
 * @see com.liferay.token.auth.model.TokenClient
 * @see com.liferay.token.auth.model.TokenClientModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TokenClientModelImpl extends BaseModelImpl<TokenClient>
	implements TokenClientModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a token client model instance should use the {@link com.liferay.token.auth.model.TokenClient} interface instead.
	 */
	public static final String TABLE_NAME = "TokenAuth_TokenClient";
	public static final Object[][] TABLE_COLUMNS = {
			{ "clientId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "clientKey", Types.VARCHAR },
			{ "clientSecrets", Types.VARCHAR },
			{ "revoked", Types.BOOLEAN },
			{ "aclProfiles", Types.VARCHAR },
			{ "tokenVerifierId", Types.VARCHAR },
			{ "callbackURI", Types.VARCHAR },
			{ "websiteURL", Types.VARCHAR },
			{ "additionalInfo", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TokenAuth_TokenClient (clientId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,clientKey VARCHAR(75) null,clientSecrets VARCHAR(75) null,revoked BOOLEAN,aclProfiles VARCHAR(75) null,tokenVerifierId VARCHAR(75) null,callbackURI VARCHAR(75) null,websiteURL VARCHAR(75) null,additionalInfo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TokenAuth_TokenClient";
	public static final String ORDER_BY_JPQL = " ORDER BY tokenClient.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY TokenAuth_TokenClient.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.token.auth.model.TokenClient"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.token.auth.model.TokenClient"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.token.auth.model.TokenClient"),
			true);
	public static final long CLIENTKEY_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long NAME_COLUMN_BITMASK = 4L;
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TokenClient toModel(TokenClientSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TokenClient model = new TokenClientImpl();

		model.setClientId(soapModel.getClientId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setClientKey(soapModel.getClientKey());
		model.setClientSecrets(soapModel.getClientSecrets());
		model.setRevoked(soapModel.getRevoked());
		model.setAclProfiles(soapModel.getAclProfiles());
		model.setTokenVerifierId(soapModel.getTokenVerifierId());
		model.setCallbackURI(soapModel.getCallbackURI());
		model.setWebsiteURL(soapModel.getWebsiteURL());
		model.setAdditionalInfo(soapModel.getAdditionalInfo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TokenClient> toModels(TokenClientSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TokenClient> models = new ArrayList<TokenClient>(soapModels.length);

		for (TokenClientSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.token.auth.model.TokenClient"));

	public TokenClientModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TokenClient.class;
	}

	@Override
	public String getModelClassName() {
		return TokenClient.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("clientId", getClientId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("clientKey", getClientKey());
		attributes.put("clientSecrets", getClientSecrets());
		attributes.put("revoked", getRevoked());
		attributes.put("aclProfiles", getAclProfiles());
		attributes.put("tokenVerifierId", getTokenVerifierId());
		attributes.put("callbackURI", getCallbackURI());
		attributes.put("websiteURL", getWebsiteURL());
		attributes.put("additionalInfo", getAdditionalInfo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long clientId = (Long)attributes.get("clientId");

		if (clientId != null) {
			setClientId(clientId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String clientKey = (String)attributes.get("clientKey");

		if (clientKey != null) {
			setClientKey(clientKey);
		}

		String clientSecrets = (String)attributes.get("clientSecrets");

		if (clientSecrets != null) {
			setClientSecrets(clientSecrets);
		}

		Boolean revoked = (Boolean)attributes.get("revoked");

		if (revoked != null) {
			setRevoked(revoked);
		}

		String aclProfiles = (String)attributes.get("aclProfiles");

		if (aclProfiles != null) {
			setAclProfiles(aclProfiles);
		}

		String tokenVerifierId = (String)attributes.get("tokenVerifierId");

		if (tokenVerifierId != null) {
			setTokenVerifierId(tokenVerifierId);
		}

		String callbackURI = (String)attributes.get("callbackURI");

		if (callbackURI != null) {
			setCallbackURI(callbackURI);
		}

		String websiteURL = (String)attributes.get("websiteURL");

		if (websiteURL != null) {
			setWebsiteURL(websiteURL);
		}

		String additionalInfo = (String)attributes.get("additionalInfo");

		if (additionalInfo != null) {
			setAdditionalInfo(additionalInfo);
		}
	}

	@JSON
	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getClientKey() {
		if (_clientKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientKey;
		}
	}

	@Override
	public void setClientKey(String clientKey) {
		_columnBitmask |= CLIENTKEY_COLUMN_BITMASK;

		if (_originalClientKey == null) {
			_originalClientKey = _clientKey;
		}

		_clientKey = clientKey;
	}

	public String getOriginalClientKey() {
		return GetterUtil.getString(_originalClientKey);
	}

	@JSON
	@Override
	public String getClientSecrets() {
		if (_clientSecrets == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientSecrets;
		}
	}

	@Override
	public void setClientSecrets(String clientSecrets) {
		_clientSecrets = clientSecrets;
	}

	@JSON
	@Override
	public boolean getRevoked() {
		return _revoked;
	}

	@Override
	public boolean isRevoked() {
		return _revoked;
	}

	@Override
	public void setRevoked(boolean revoked) {
		_revoked = revoked;
	}

	@JSON
	@Override
	public String getAclProfiles() {
		if (_aclProfiles == null) {
			return StringPool.BLANK;
		}
		else {
			return _aclProfiles;
		}
	}

	@Override
	public void setAclProfiles(String aclProfiles) {
		_aclProfiles = aclProfiles;
	}

	@JSON
	@Override
	public String getTokenVerifierId() {
		if (_tokenVerifierId == null) {
			return StringPool.BLANK;
		}
		else {
			return _tokenVerifierId;
		}
	}

	@Override
	public void setTokenVerifierId(String tokenVerifierId) {
		_tokenVerifierId = tokenVerifierId;
	}

	@JSON
	@Override
	public String getCallbackURI() {
		if (_callbackURI == null) {
			return StringPool.BLANK;
		}
		else {
			return _callbackURI;
		}
	}

	@Override
	public void setCallbackURI(String callbackURI) {
		_callbackURI = callbackURI;
	}

	@JSON
	@Override
	public String getWebsiteURL() {
		if (_websiteURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _websiteURL;
		}
	}

	@Override
	public void setWebsiteURL(String websiteURL) {
		_websiteURL = websiteURL;
	}

	@JSON
	@Override
	public String getAdditionalInfo() {
		if (_additionalInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalInfo;
		}
	}

	@Override
	public void setAdditionalInfo(String additionalInfo) {
		_additionalInfo = additionalInfo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TokenClient.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TokenClient toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TokenClient)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TokenClientImpl tokenClientImpl = new TokenClientImpl();

		tokenClientImpl.setClientId(getClientId());
		tokenClientImpl.setCompanyId(getCompanyId());
		tokenClientImpl.setUserId(getUserId());
		tokenClientImpl.setUserName(getUserName());
		tokenClientImpl.setCreateDate(getCreateDate());
		tokenClientImpl.setModifiedDate(getModifiedDate());
		tokenClientImpl.setName(getName());
		tokenClientImpl.setDescription(getDescription());
		tokenClientImpl.setClientKey(getClientKey());
		tokenClientImpl.setClientSecrets(getClientSecrets());
		tokenClientImpl.setRevoked(getRevoked());
		tokenClientImpl.setAclProfiles(getAclProfiles());
		tokenClientImpl.setTokenVerifierId(getTokenVerifierId());
		tokenClientImpl.setCallbackURI(getCallbackURI());
		tokenClientImpl.setWebsiteURL(getWebsiteURL());
		tokenClientImpl.setAdditionalInfo(getAdditionalInfo());

		tokenClientImpl.resetOriginalValues();

		return tokenClientImpl;
	}

	@Override
	public int compareTo(TokenClient tokenClient) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), tokenClient.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TokenClient)) {
			return false;
		}

		TokenClient tokenClient = (TokenClient)obj;

		long primaryKey = tokenClient.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TokenClientModelImpl tokenClientModelImpl = this;

		tokenClientModelImpl._originalCompanyId = tokenClientModelImpl._companyId;

		tokenClientModelImpl._setOriginalCompanyId = false;

		tokenClientModelImpl._originalName = tokenClientModelImpl._name;

		tokenClientModelImpl._originalClientKey = tokenClientModelImpl._clientKey;

		tokenClientModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TokenClient> toCacheModel() {
		TokenClientCacheModel tokenClientCacheModel = new TokenClientCacheModel();

		tokenClientCacheModel.clientId = getClientId();

		tokenClientCacheModel.companyId = getCompanyId();

		tokenClientCacheModel.userId = getUserId();

		tokenClientCacheModel.userName = getUserName();

		String userName = tokenClientCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tokenClientCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tokenClientCacheModel.createDate = createDate.getTime();
		}
		else {
			tokenClientCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tokenClientCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tokenClientCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tokenClientCacheModel.name = getName();

		String name = tokenClientCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			tokenClientCacheModel.name = null;
		}

		tokenClientCacheModel.description = getDescription();

		String description = tokenClientCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			tokenClientCacheModel.description = null;
		}

		tokenClientCacheModel.clientKey = getClientKey();

		String clientKey = tokenClientCacheModel.clientKey;

		if ((clientKey != null) && (clientKey.length() == 0)) {
			tokenClientCacheModel.clientKey = null;
		}

		tokenClientCacheModel.clientSecrets = getClientSecrets();

		String clientSecrets = tokenClientCacheModel.clientSecrets;

		if ((clientSecrets != null) && (clientSecrets.length() == 0)) {
			tokenClientCacheModel.clientSecrets = null;
		}

		tokenClientCacheModel.revoked = getRevoked();

		tokenClientCacheModel.aclProfiles = getAclProfiles();

		String aclProfiles = tokenClientCacheModel.aclProfiles;

		if ((aclProfiles != null) && (aclProfiles.length() == 0)) {
			tokenClientCacheModel.aclProfiles = null;
		}

		tokenClientCacheModel.tokenVerifierId = getTokenVerifierId();

		String tokenVerifierId = tokenClientCacheModel.tokenVerifierId;

		if ((tokenVerifierId != null) && (tokenVerifierId.length() == 0)) {
			tokenClientCacheModel.tokenVerifierId = null;
		}

		tokenClientCacheModel.callbackURI = getCallbackURI();

		String callbackURI = tokenClientCacheModel.callbackURI;

		if ((callbackURI != null) && (callbackURI.length() == 0)) {
			tokenClientCacheModel.callbackURI = null;
		}

		tokenClientCacheModel.websiteURL = getWebsiteURL();

		String websiteURL = tokenClientCacheModel.websiteURL;

		if ((websiteURL != null) && (websiteURL.length() == 0)) {
			tokenClientCacheModel.websiteURL = null;
		}

		tokenClientCacheModel.additionalInfo = getAdditionalInfo();

		String additionalInfo = tokenClientCacheModel.additionalInfo;

		if ((additionalInfo != null) && (additionalInfo.length() == 0)) {
			tokenClientCacheModel.additionalInfo = null;
		}

		return tokenClientCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{clientId=");
		sb.append(getClientId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", clientKey=");
		sb.append(getClientKey());
		sb.append(", clientSecrets=");
		sb.append(getClientSecrets());
		sb.append(", revoked=");
		sb.append(getRevoked());
		sb.append(", aclProfiles=");
		sb.append(getAclProfiles());
		sb.append(", tokenVerifierId=");
		sb.append(getTokenVerifierId());
		sb.append(", callbackURI=");
		sb.append(getCallbackURI());
		sb.append(", websiteURL=");
		sb.append(getWebsiteURL());
		sb.append(", additionalInfo=");
		sb.append(getAdditionalInfo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.liferay.token.auth.model.TokenClient");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>clientId</column-name><column-value><![CDATA[");
		sb.append(getClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientKey</column-name><column-value><![CDATA[");
		sb.append(getClientKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientSecrets</column-name><column-value><![CDATA[");
		sb.append(getClientSecrets());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>revoked</column-name><column-value><![CDATA[");
		sb.append(getRevoked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aclProfiles</column-name><column-value><![CDATA[");
		sb.append(getAclProfiles());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tokenVerifierId</column-name><column-value><![CDATA[");
		sb.append(getTokenVerifierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callbackURI</column-name><column-value><![CDATA[");
		sb.append(getCallbackURI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>websiteURL</column-name><column-value><![CDATA[");
		sb.append(getWebsiteURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalInfo</column-name><column-value><![CDATA[");
		sb.append(getAdditionalInfo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TokenClient.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TokenClient.class
		};
	private long _clientId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _originalName;
	private String _description;
	private String _clientKey;
	private String _originalClientKey;
	private String _clientSecrets;
	private boolean _revoked;
	private String _aclProfiles;
	private String _tokenVerifierId;
	private String _callbackURI;
	private String _websiteURL;
	private String _additionalInfo;
	private long _columnBitmask;
	private TokenClient _escapedModel;
}