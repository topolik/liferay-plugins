/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.token.auth.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.User;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.service.UserLocalServiceUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.token.auth.model.TokenACLProfile;
import com.liferay.token.auth.model.TokenACLProfileModel;
import com.liferay.token.auth.model.TokenACLProfileSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TokenACLProfile service. Represents a row in the &quot;TokenAuth_TokenACLProfile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.token.auth.model.TokenACLProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TokenACLProfileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TokenACLProfileImpl
 * @see com.liferay.token.auth.model.TokenACLProfile
 * @see com.liferay.token.auth.model.TokenACLProfileModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TokenACLProfileModelImpl extends BaseModelImpl<TokenACLProfile>
	implements TokenACLProfileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a token a c l profile model instance should use the {@link com.liferay.token.auth.model.TokenACLProfile} interface instead.
	 */
	public static final String TABLE_NAME = "TokenAuth_TokenACLProfile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "aclProfileId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "acl", Types.VARCHAR },
			{ "parentProfileId", Types.BIGINT },
			{ "effectiveACL", Types.VARCHAR },
			{ "system", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table TokenAuth_TokenACLProfile (aclProfileId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,acl VARCHAR(75) null,parentProfileId LONG,effectiveACL VARCHAR(75) null,system BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table TokenAuth_TokenACLProfile";
	public static final String ORDER_BY_JPQL = " ORDER BY tokenACLProfile.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY TokenAuth_TokenACLProfile.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.token.auth.model.TokenACLProfile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.token.auth.model.TokenACLProfile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.token.auth.model.TokenACLProfile"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long NAME_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TokenACLProfile toModel(TokenACLProfileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TokenACLProfile model = new TokenACLProfileImpl();

		model.setAclProfileId(soapModel.getAclProfileId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setAcl(soapModel.getAcl());
		model.setParentProfileId(soapModel.getParentProfileId());
		model.setEffectiveACL(soapModel.getEffectiveACL());
		model.setSystem(soapModel.getSystem());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TokenACLProfile> toModels(
		TokenACLProfileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TokenACLProfile> models = new ArrayList<TokenACLProfile>(soapModels.length);

		for (TokenACLProfileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.token.auth.model.TokenACLProfile"));

	public TokenACLProfileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _aclProfileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAclProfileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _aclProfileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TokenACLProfile.class;
	}

	@Override
	public String getModelClassName() {
		return TokenACLProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("aclProfileId", getAclProfileId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("acl", getAcl());
		attributes.put("parentProfileId", getParentProfileId());
		attributes.put("effectiveACL", getEffectiveACL());
		attributes.put("system", getSystem());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long aclProfileId = (Long)attributes.get("aclProfileId");

		if (aclProfileId != null) {
			setAclProfileId(aclProfileId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String acl = (String)attributes.get("acl");

		if (acl != null) {
			setAcl(acl);
		}

		Long parentProfileId = (Long)attributes.get("parentProfileId");

		if (parentProfileId != null) {
			setParentProfileId(parentProfileId);
		}

		String effectiveACL = (String)attributes.get("effectiveACL");

		if (effectiveACL != null) {
			setEffectiveACL(effectiveACL);
		}

		Boolean system = (Boolean)attributes.get("system");

		if (system != null) {
			setSystem(system);
		}
	}

	@JSON
	@Override
	public long getAclProfileId() {
		return _aclProfileId;
	}

	@Override
	public void setAclProfileId(long aclProfileId) {
		_aclProfileId = aclProfileId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getAcl() {
		if (_acl == null) {
			return StringPool.BLANK;
		}
		else {
			return _acl;
		}
	}

	@Override
	public void setAcl(String acl) {
		_acl = acl;
	}

	@JSON
	@Override
	public long getParentProfileId() {
		return _parentProfileId;
	}

	@Override
	public void setParentProfileId(long parentProfileId) {
		_parentProfileId = parentProfileId;
	}

	@JSON
	@Override
	public String getEffectiveACL() {
		if (_effectiveACL == null) {
			return StringPool.BLANK;
		}
		else {
			return _effectiveACL;
		}
	}

	@Override
	public void setEffectiveACL(String effectiveACL) {
		_effectiveACL = effectiveACL;
	}

	@JSON
	@Override
	public boolean getSystem() {
		return _system;
	}

	@Override
	public boolean isSystem() {
		return _system;
	}

	@Override
	public void setSystem(boolean system) {
		_system = system;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TokenACLProfile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TokenACLProfile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TokenACLProfile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TokenACLProfileImpl tokenACLProfileImpl = new TokenACLProfileImpl();

		tokenACLProfileImpl.setAclProfileId(getAclProfileId());
		tokenACLProfileImpl.setCompanyId(getCompanyId());
		tokenACLProfileImpl.setUserId(getUserId());
		tokenACLProfileImpl.setUserName(getUserName());
		tokenACLProfileImpl.setCreateDate(getCreateDate());
		tokenACLProfileImpl.setModifiedDate(getModifiedDate());
		tokenACLProfileImpl.setName(getName());
		tokenACLProfileImpl.setDescription(getDescription());
		tokenACLProfileImpl.setAcl(getAcl());
		tokenACLProfileImpl.setParentProfileId(getParentProfileId());
		tokenACLProfileImpl.setEffectiveACL(getEffectiveACL());
		tokenACLProfileImpl.setSystem(getSystem());

		tokenACLProfileImpl.resetOriginalValues();

		return tokenACLProfileImpl;
	}

	@Override
	public int compareTo(TokenACLProfile tokenACLProfile) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				tokenACLProfile.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TokenACLProfile)) {
			return false;
		}

		TokenACLProfile tokenACLProfile = (TokenACLProfile)obj;

		long primaryKey = tokenACLProfile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TokenACLProfileModelImpl tokenACLProfileModelImpl = this;

		tokenACLProfileModelImpl._originalCompanyId = tokenACLProfileModelImpl._companyId;

		tokenACLProfileModelImpl._setOriginalCompanyId = false;

		tokenACLProfileModelImpl._originalName = tokenACLProfileModelImpl._name;

		tokenACLProfileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TokenACLProfile> toCacheModel() {
		TokenACLProfileCacheModel tokenACLProfileCacheModel = new TokenACLProfileCacheModel();

		tokenACLProfileCacheModel.aclProfileId = getAclProfileId();

		tokenACLProfileCacheModel.companyId = getCompanyId();

		tokenACLProfileCacheModel.userId = getUserId();

		tokenACLProfileCacheModel.userName = getUserName();

		String userName = tokenACLProfileCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tokenACLProfileCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tokenACLProfileCacheModel.createDate = createDate.getTime();
		}
		else {
			tokenACLProfileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tokenACLProfileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tokenACLProfileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tokenACLProfileCacheModel.name = getName();

		String name = tokenACLProfileCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			tokenACLProfileCacheModel.name = null;
		}

		tokenACLProfileCacheModel.description = getDescription();

		String description = tokenACLProfileCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			tokenACLProfileCacheModel.description = null;
		}

		tokenACLProfileCacheModel.acl = getAcl();

		String acl = tokenACLProfileCacheModel.acl;

		if ((acl != null) && (acl.length() == 0)) {
			tokenACLProfileCacheModel.acl = null;
		}

		tokenACLProfileCacheModel.parentProfileId = getParentProfileId();

		tokenACLProfileCacheModel.effectiveACL = getEffectiveACL();

		String effectiveACL = tokenACLProfileCacheModel.effectiveACL;

		if ((effectiveACL != null) && (effectiveACL.length() == 0)) {
			tokenACLProfileCacheModel.effectiveACL = null;
		}

		tokenACLProfileCacheModel.system = getSystem();

		return tokenACLProfileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{aclProfileId=");
		sb.append(getAclProfileId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", acl=");
		sb.append(getAcl());
		sb.append(", parentProfileId=");
		sb.append(getParentProfileId());
		sb.append(", effectiveACL=");
		sb.append(getEffectiveACL());
		sb.append(", system=");
		sb.append(getSystem());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.token.auth.model.TokenACLProfile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>aclProfileId</column-name><column-value><![CDATA[");
		sb.append(getAclProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>acl</column-name><column-value><![CDATA[");
		sb.append(getAcl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentProfileId</column-name><column-value><![CDATA[");
		sb.append(getParentProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveACL</column-name><column-value><![CDATA[");
		sb.append(getEffectiveACL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>system</column-name><column-value><![CDATA[");
		sb.append(getSystem());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TokenACLProfile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TokenACLProfile.class
		};
	private long _aclProfileId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _originalName;
	private String _description;
	private String _acl;
	private long _parentProfileId;
	private String _effectiveACL;
	private boolean _system;
	private long _columnBitmask;
	private TokenACLProfile _escapedModel;
}