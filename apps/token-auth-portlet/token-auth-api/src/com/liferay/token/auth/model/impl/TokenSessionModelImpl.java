/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.token.auth.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.User;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.service.UserLocalServiceUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.token.auth.model.TokenSession;
import com.liferay.token.auth.model.TokenSessionModel;
import com.liferay.token.auth.model.TokenSessionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TokenSession service. Represents a row in the &quot;TokenAuth_TokenSession&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.token.auth.model.TokenSessionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TokenSessionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TokenSessionImpl
 * @see com.liferay.token.auth.model.TokenSession
 * @see com.liferay.token.auth.model.TokenSessionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TokenSessionModelImpl extends BaseModelImpl<TokenSession>
	implements TokenSessionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a token session model instance should use the {@link com.liferay.token.auth.model.TokenSession} interface instead.
	 */
	public static final String TABLE_NAME = "TokenAuth_TokenSession";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sessionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "clientId", Types.BIGINT },
			{ "token", Types.VARCHAR },
			{ "remoteInfo", Types.VARCHAR },
			{ "lastUsedDate", Types.TIMESTAMP },
			{ "additionalInfo", Types.VARCHAR },
			{ "expiryDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table TokenAuth_TokenSession (sessionId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,clientId LONG,token VARCHAR(75) null,remoteInfo VARCHAR(75) null,lastUsedDate DATE null,additionalInfo VARCHAR(75) null,expiryDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table TokenAuth_TokenSession";
	public static final String ORDER_BY_JPQL = " ORDER BY tokenSession.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY TokenAuth_TokenSession.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.token.auth.model.TokenSession"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.token.auth.model.TokenSession"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.token.auth.model.TokenSession"),
			true);
	public static final long CLIENTID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TokenSession toModel(TokenSessionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TokenSession model = new TokenSessionImpl();

		model.setSessionId(soapModel.getSessionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setClientId(soapModel.getClientId());
		model.setToken(soapModel.getToken());
		model.setRemoteInfo(soapModel.getRemoteInfo());
		model.setLastUsedDate(soapModel.getLastUsedDate());
		model.setAdditionalInfo(soapModel.getAdditionalInfo());
		model.setExpiryDate(soapModel.getExpiryDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TokenSession> toModels(TokenSessionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TokenSession> models = new ArrayList<TokenSession>(soapModels.length);

		for (TokenSessionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.token.auth.model.TokenSession"));

	public TokenSessionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sessionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSessionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sessionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TokenSession.class;
	}

	@Override
	public String getModelClassName() {
		return TokenSession.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sessionId", getSessionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("clientId", getClientId());
		attributes.put("token", getToken());
		attributes.put("remoteInfo", getRemoteInfo());
		attributes.put("lastUsedDate", getLastUsedDate());
		attributes.put("additionalInfo", getAdditionalInfo());
		attributes.put("expiryDate", getExpiryDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sessionId = (Long)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long clientId = (Long)attributes.get("clientId");

		if (clientId != null) {
			setClientId(clientId);
		}

		String token = (String)attributes.get("token");

		if (token != null) {
			setToken(token);
		}

		String remoteInfo = (String)attributes.get("remoteInfo");

		if (remoteInfo != null) {
			setRemoteInfo(remoteInfo);
		}

		Date lastUsedDate = (Date)attributes.get("lastUsedDate");

		if (lastUsedDate != null) {
			setLastUsedDate(lastUsedDate);
		}

		String additionalInfo = (String)attributes.get("additionalInfo");

		if (additionalInfo != null) {
			setAdditionalInfo(additionalInfo);
		}

		Date expiryDate = (Date)attributes.get("expiryDate");

		if (expiryDate != null) {
			setExpiryDate(expiryDate);
		}
	}

	@JSON
	@Override
	public long getSessionId() {
		return _sessionId;
	}

	@Override
	public void setSessionId(long sessionId) {
		_sessionId = sessionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_columnBitmask |= CLIENTID_COLUMN_BITMASK;

		if (!_setOriginalClientId) {
			_setOriginalClientId = true;

			_originalClientId = _clientId;
		}

		_clientId = clientId;
	}

	public long getOriginalClientId() {
		return _originalClientId;
	}

	@JSON
	@Override
	public String getToken() {
		if (_token == null) {
			return StringPool.BLANK;
		}
		else {
			return _token;
		}
	}

	@Override
	public void setToken(String token) {
		_token = token;
	}

	@JSON
	@Override
	public String getRemoteInfo() {
		if (_remoteInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _remoteInfo;
		}
	}

	@Override
	public void setRemoteInfo(String remoteInfo) {
		_remoteInfo = remoteInfo;
	}

	@JSON
	@Override
	public Date getLastUsedDate() {
		return _lastUsedDate;
	}

	@Override
	public void setLastUsedDate(Date lastUsedDate) {
		_lastUsedDate = lastUsedDate;
	}

	@JSON
	@Override
	public String getAdditionalInfo() {
		if (_additionalInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalInfo;
		}
	}

	@Override
	public void setAdditionalInfo(String additionalInfo) {
		_additionalInfo = additionalInfo;
	}

	@JSON
	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		_expiryDate = expiryDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TokenSession.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TokenSession toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TokenSession)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TokenSessionImpl tokenSessionImpl = new TokenSessionImpl();

		tokenSessionImpl.setSessionId(getSessionId());
		tokenSessionImpl.setCompanyId(getCompanyId());
		tokenSessionImpl.setUserId(getUserId());
		tokenSessionImpl.setUserName(getUserName());
		tokenSessionImpl.setCreateDate(getCreateDate());
		tokenSessionImpl.setClientId(getClientId());
		tokenSessionImpl.setToken(getToken());
		tokenSessionImpl.setRemoteInfo(getRemoteInfo());
		tokenSessionImpl.setLastUsedDate(getLastUsedDate());
		tokenSessionImpl.setAdditionalInfo(getAdditionalInfo());
		tokenSessionImpl.setExpiryDate(getExpiryDate());

		tokenSessionImpl.resetOriginalValues();

		return tokenSessionImpl;
	}

	@Override
	public int compareTo(TokenSession tokenSession) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), tokenSession.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TokenSession)) {
			return false;
		}

		TokenSession tokenSession = (TokenSession)obj;

		long primaryKey = tokenSession.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TokenSessionModelImpl tokenSessionModelImpl = this;

		tokenSessionModelImpl._originalCompanyId = tokenSessionModelImpl._companyId;

		tokenSessionModelImpl._setOriginalCompanyId = false;

		tokenSessionModelImpl._originalClientId = tokenSessionModelImpl._clientId;

		tokenSessionModelImpl._setOriginalClientId = false;

		tokenSessionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TokenSession> toCacheModel() {
		TokenSessionCacheModel tokenSessionCacheModel = new TokenSessionCacheModel();

		tokenSessionCacheModel.sessionId = getSessionId();

		tokenSessionCacheModel.companyId = getCompanyId();

		tokenSessionCacheModel.userId = getUserId();

		tokenSessionCacheModel.userName = getUserName();

		String userName = tokenSessionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tokenSessionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tokenSessionCacheModel.createDate = createDate.getTime();
		}
		else {
			tokenSessionCacheModel.createDate = Long.MIN_VALUE;
		}

		tokenSessionCacheModel.clientId = getClientId();

		tokenSessionCacheModel.token = getToken();

		String token = tokenSessionCacheModel.token;

		if ((token != null) && (token.length() == 0)) {
			tokenSessionCacheModel.token = null;
		}

		tokenSessionCacheModel.remoteInfo = getRemoteInfo();

		String remoteInfo = tokenSessionCacheModel.remoteInfo;

		if ((remoteInfo != null) && (remoteInfo.length() == 0)) {
			tokenSessionCacheModel.remoteInfo = null;
		}

		Date lastUsedDate = getLastUsedDate();

		if (lastUsedDate != null) {
			tokenSessionCacheModel.lastUsedDate = lastUsedDate.getTime();
		}
		else {
			tokenSessionCacheModel.lastUsedDate = Long.MIN_VALUE;
		}

		tokenSessionCacheModel.additionalInfo = getAdditionalInfo();

		String additionalInfo = tokenSessionCacheModel.additionalInfo;

		if ((additionalInfo != null) && (additionalInfo.length() == 0)) {
			tokenSessionCacheModel.additionalInfo = null;
		}

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			tokenSessionCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			tokenSessionCacheModel.expiryDate = Long.MIN_VALUE;
		}

		return tokenSessionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{sessionId=");
		sb.append(getSessionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", clientId=");
		sb.append(getClientId());
		sb.append(", token=");
		sb.append(getToken());
		sb.append(", remoteInfo=");
		sb.append(getRemoteInfo());
		sb.append(", lastUsedDate=");
		sb.append(getLastUsedDate());
		sb.append(", additionalInfo=");
		sb.append(getAdditionalInfo());
		sb.append(", expiryDate=");
		sb.append(getExpiryDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.token.auth.model.TokenSession");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId</column-name><column-value><![CDATA[");
		sb.append(getClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>token</column-name><column-value><![CDATA[");
		sb.append(getToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remoteInfo</column-name><column-value><![CDATA[");
		sb.append(getRemoteInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUsedDate</column-name><column-value><![CDATA[");
		sb.append(getLastUsedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalInfo</column-name><column-value><![CDATA[");
		sb.append(getAdditionalInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiryDate</column-name><column-value><![CDATA[");
		sb.append(getExpiryDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TokenSession.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TokenSession.class
		};
	private long _sessionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private long _clientId;
	private long _originalClientId;
	private boolean _setOriginalClientId;
	private String _token;
	private String _remoteInfo;
	private Date _lastUsedDate;
	private String _additionalInfo;
	private Date _expiryDate;
	private long _columnBitmask;
	private TokenSession _escapedModel;
}